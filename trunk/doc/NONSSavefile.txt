//All strings are UTF-8.
//Latest version: 4

String. "NONS". (magic word)
Word. Version.
5*DWord. Hash of the generating script. (Loading will fail if it doesn't match. If it matches, no further error checking is done.)
DWord. Start of the stack section.
DWord. Start of the variables section.
DWord. Start of the screen section.
DWord. Start of the audio section.
Stack section{
	DWord. Size of the stack (n).
	n*Stack element{
		Byte. Type of nest. (1 subroutine, 2 for, 3 textgosub, 4 user command)
		String. Label.
		if (save_version<2){
			DWord. Offset in wide characters from the label.
		}else{
			DWord. Number of lines below the original label.
			DWord. Statement offset (statement 0:statement 1:statement 2).
			DWord. Level of textgosub recursion.
		}
		if (Type of nest==1)
			String. A string that must be interpreted before popping the stack.
		else if (Type of nest==2){
			DWord. A variable stack index used to identify the for index variable.
			sDWord. The final value of the for (for (;var<=val;)).
			sDWord. The step of the for (for (;;var+=step)).
		}else if (Type of nest==3 && save_version>1){
			//TODO: Add support for saving from inside textgosub.
			//DWord. Number of pages (n1).
			//n1*Page{
			//	String. Printing string.
			//	String. Reduced string.
			//	DWord. Start at for printing.
			//	DWord. Start at for reduced.
			//	DWord. Number of stops for the page (n2).
			//	n2*Stop{
			//		DWord. Position in the printing string.
			//		DWord. Position in the reduced string.
			//	}
			//}
		}else if (Type of nest==4 && save_version>2){
			String. A string that must be interpreted before popping the stack.
			DWord. Total parameters (n).
			n{
				String. Parameter string.
			}
		}
	}
	String. Current label.
	if (save_version<2){
		DWord. Offset in wide characters from the label.
	}else{
		DWord. Number of lines below the original label.
		DWord. Statement offset (statement 0:statement 1:statement 2).
	}
	if (save_version>=3)
		String. loadgosub label.
}
Variables section{
	DWord. Number of intervals (n).
	n*Interval{
		if (Size of the interval==1)
			DWord. (First variable in the interval)|0x80000000.
		else{
			DWord. First variable in the interval.
			DWord. Size of the interval.
		}
	}
	Variable{
		//Stack position is determined by interval.
		sDWord. intValue.
		String. wcsValue.
	}
	//DWord. Number of arrays (n).
	//n*Array{
	//	String. Name.
	//	*0
	//	DWord. Size of dimension (n2).
	//	if (n2){
	//		n2*Variable{
	//			sDWord. intValue.
	//			//Removed on 2009-02-23:
	//			//String. wcsValue.
	//			<recursion from *0 to *1>
	//		}
	//	}
	//	*1
	//}
	//^Changed on 2009-05-12 to:
	DWord. Number of intervals (n).
	n*Interval{
		if (Size of the interval==1)
			DWord. (First array in the interval)|0x80000000.
		else{
			DWord. First array in the interval.
			DWord. Size of the interval.
		}
	}
	Array{
		//Identifier is determined by interval.
		*0
		DWord. Size of dimension (n).
		if (n){
			n{
				<recursion from *0 to *1>
			}
		}else{
			sDWord. intValue.
		}
		*1
	}
}
Screen section{
	DWord. Start of the window subsection.
	DWord. Start of the graphic subsection.
	Window subsection{
		sWord. Window x.
		sWord. Window y.
		sWord. Window w.
		sWord. Window h.
		sWord. Frame x.
		sWord. Frame y.
		sWord. Frame w.
		sWord. Frame h.
		Byte. Window shade R.
		Byte. Window shade G.
		Byte. Window shade B.
		DWord. Transition.
		DWord. Transition duration.
		String. Transition rule.
		Byte. Hide window during effect?
		Word. Font size.
		Byte. Font color R.
		Byte. Font color G.
		Byte. Font color B.
		DWord. Text speed.
		Byte. Shadow?
		if (save_version>2){
			sDWord. Shadow X offset.
			sDWord. Shadow Y offset.
		}
		Word. Font spacing.
		sWord. Font line skip (-1 is native).
		DWord. Size of log (n).
		n*String. Log pages.
		String. Current text buffer.
		if (save_version>2)
			DWord. Indentation level.
		Word. Current text x.
		Word. Current text y.
		String. Arrow cursor.
		Byte. Arrow cursor absolute?
		sWord. Arrow cursor x.
		sWord. Arrow cursor y.
		String. Page cursor.
		Byte. Page cursor absolute?
		sWord. Page cursor x.
		sWord. Page cursor y.
		Byte. Right click mode.
	}
	Graphic subsection{
		String. Backgound.
		if (!Background){
			Byte. Background color R.
			Byte. Background color G.
			Byte. Background color B.
		}
		if (save_version<2){
			String. Left character.
			String. Center character.
			String. Right character.
		}else{
			DWord. Character base line.
			
			String. Left character.
			if (left character){
				sDWord. Left's X.
				sDWord. Left's Y.
				Byte. Left's visibility.
				Byte. Left's alpha.
			}
			
			String. Center character.
			if (center character){
				sDWord. Center's X.
				sDWord. Center's Y.
				Byte. Center's visibility.
				Byte. Center's alpha.
			}
			
			String. Right character.
			if (right character){
				sDWord. Right's X.
				sDWord. Right's Y.
				Byte. Right's visibility.
				Byte. Right's alpha.
			}
		}
		if (save_version>2){
			//Note: For the following, no more characters is signaled by a 255.
			Byte. First character to blend.
			Byte. Second character to blend.
			Byte. Third character to blend.
			
			Byte. Blend sprites?
		}
		DWord. Number of intervals (n).
		n*Interval{
			if (Size of the interval==1)
				DWord. (First number in the interval)&0x80000000.
			else{
				DWord. First number in the interval.
				DWord. Size of the interval.
			}
		}
		Sprite{
			//Sprite no. is determined by interval.
			String. Sprite.
			sDWord. X.
			sDWord. Y.
			Byte. Visible?
			Byte. Alpha.
		}
		DWord. Sprite priority.
		if (save_version<4){
			Byte. Monochrome?
			Byte. Monochrome R.
			Byte. Monochrome G.
			Byte. Monochrome B.
			Byte. Negative?
		}else{
			Byte. Apply monochrome first?
			//(Pre-text window filter pipeline.)
			DWord. Size of the filter pipeline (n).
			n*Pipeline element{
				DWord. Effect number.
				Byte. Red component.
				Byte. Green component.
				Byte. Blue component.
				String. Rule.
			}
			DWord. Asynchronous effect number. //(0 if none)
			DWord. Frequency.
			//(Overall filter pipeline.)
			DWord. Size of the filter pipeline (n).
			n*Pipeline element{
				DWord. Effect number.
				Byte. Red component.
				Byte. Green component.
				Byte. Blue component.
				String. Rule.
			}
		}
	}
}
Audio section{
	sByte. Track.
	if (Track<0){
		String. File name.
	}
	sByte. Music volume|(Loop music?0:0x80).
	Word. Total channels (n).
	n*Channel{
		String. File name.
		sByte. Channel volume|(Loop?0:0x80).
	}
}
