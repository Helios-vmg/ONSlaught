/*
* Copyright (c) 2008-2010, Helios (helios.vmg@gmail.com)
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright notice, 
*       this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * The name of the author may not be used to endorse or promote products
*       derived from this software without specific prior written permission. 
*     * Products derived from this software may not be called "ONSlaught" nor
*       may "ONSlaught" appear in their names without specific prior written
*       permission from the author. 
*
* THIS SOFTWARE IS PROVIDED BY HELIOS "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
* EVENT SHALL HELIOS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
* OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
* OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*/
%{
#include "ExpressionParser.tab.hpp"
#include "ScriptInterpreter.h"
#include "VariableStore.h"
#include "IOFunctions.h"
%}
%parse-param {std::wstringstream *stream}
%parse-param {NONS_VariableStore *store}
%parse-param {NONS_Expression::Expression *&res}
%parse-param {PreParserData *ppd}
%lex-param {std::wstringstream *stream}
%lex-param {NONS_VariableStore *store}
%lex-param {PreParserData *ppd}
%pure-parser
%defines
%debug
%file-prefix="ExpressionParser"
%name-prefix="expressionParser_yy"
%code requires {
	#include <set>
	#include <vector>
	#include "Common.h"
	struct NONS_VariableStore;
	namespace NONS_Expression{
		struct Expression;
	}
	struct wstrCmp;
	struct PreParserData;
	#ifdef ERROR
	#undef ERROR
	#endif
}
%code provides {
	#include <sstream>
	extern int expressionParser_yydebug;
	int expressionParser_yyparse(
		std::wstringstream *stream,
		NONS_VariableStore *store,
		NONS_Expression::Expression *&res,
		PreParserData *ppd
	);
	int expressionParser_yylex(
		YYSTYPE *yylval,
		std::wstringstream *stream,
		NONS_VariableStore *store,
		PreParserData *ppd
	);
	void expressionParser_yyerror(
		std::wstringstream *,
		NONS_VariableStore *,
		NONS_Expression::Expression *&,
		PreParserData *ppd,
		char const *
	);
}
%union {
	NONS_Expression::Expression *obj;
	ulong position;
}
%token FOR FOR_TO IF FOR_STEP 
%token <obj> INTEGER STRING INTEGER_ARRAY ERROR
%token <position> IF_THEN
%type <obj> expr integer_array string integer dereference_parameter
%left OR
%left AND
%left EQUALS NEQ LOWER LOWEREQ GREATER GREATEREQ
%right FCHK LCHK
%left '+' '-'
%left '*' '/'
%right NEG POS
%left '[' ']'
%right EVAL ATOI ITOA
%left STRING_CONCATENATION
%right '%' '$' '?'
%left '(' ')'
%start begin
%destructor {
	if ($$)
		delete $$;
} expr integer_array dereference_parameter string integer INTEGER STRING INTEGER_ARRAY
%%

begin:
	eval |
	parse_if |
	parse_for;

eval:
	expr {
		res=$1;
	}|
	string {
		res=$1;
	}|
	ERROR {
		YYABORT;
	};

parse_if:
	IF expr IF_THEN {
		ppd->res.push_back($2);
		ppd->then_position=$3;
		YYACCEPT;
	};

parse_for:
	FOR expr EQUALS expr FOR_TO expr {
		ppd->res.push_back($2);
		ppd->res.push_back($4);
		ppd->res.push_back($6);
		YYACCEPT;
	}|
	FOR expr EQUALS expr FOR_TO expr FOR_STEP expr {
		ppd->res.push_back($2);
		ppd->res.push_back($4);
		ppd->res.push_back($6);
		ppd->res.push_back($8);
		YYACCEPT;
	};

integer:
	INTEGER {
		$$=$1;
	}|
	EVAL '(' string ')' {
		$$=new NONS_Expression::Expression(NONS_Expression::eval,$3,0);
	}|
	ATOI '(' string ')' {
		$$=new NONS_Expression::Expression(NONS_Expression::atoi,$3,0);
	}|
	'%' dereference_parameter {
		$$=new NONS_Expression::Expression(NONS_Expression::integer_dereference,$2,0);
	};

integer_array:
	'?' dereference_parameter {
		$$=new NONS_Expression::Expression(NONS_Expression::array_indexing,$2,0);
	}|
	integer_array '[' expr ']' {
		$$=$1;
		$$->operands.push_back($3);
	}|
	'?' error '[' {
		$$=0;
		YYABORT;
	};

string:
	STRING {
		$$=$1;
	}|
	'$' dereference_parameter {
		$$=new NONS_Expression::Expression(NONS_Expression::string_dereference,$2,0);
	}|
	ITOA '(' expr ')' {
		$$=new NONS_Expression::Expression(NONS_Expression::itoa,$3,0);
	}|
	'(' string ')' {
		$$=$2;
	}|
	string '+' string %prec STRING_CONCATENATION {
		$$=new NONS_Expression::Expression(NONS_Expression::concat,$1,$3,0);
	};

expr:
	integer {
		$$=$1;
	}|
	integer_array {
		$$=$1;
	}|
	expr '+' expr {
		$$=new NONS_Expression::Expression(NONS_Expression::add,$1,$3,0);
	}|
	expr '-' expr {
		$$=new NONS_Expression::Expression(NONS_Expression::sub,$1,$3,0);
	}|
	expr '*' expr {
		$$=new NONS_Expression::Expression(NONS_Expression::mul,$1,$3,0);
	}|
	expr '/' expr {
		$$=new NONS_Expression::Expression(NONS_Expression::div,$1,$3,0);
	}|
	expr EQUALS expr {
		$$=new NONS_Expression::Expression(NONS_Expression::equals,$1,$3,0);
	}|
	expr NEQ expr {
		$$=new NONS_Expression::Expression(NONS_Expression::nequals,$1,$3,0);
	}|
	expr LOWER expr {
		$$=new NONS_Expression::Expression(NONS_Expression::lower,$1,$3,0);
	}|
	expr GREATEREQ expr {
		$$=new NONS_Expression::Expression(NONS_Expression::greatereq,$1,$3,0);
	}|
	expr GREATER expr {
		$$=new NONS_Expression::Expression(NONS_Expression::greater,$1,$3,0);
	}|
	expr LOWEREQ expr {
		$$=new NONS_Expression::Expression(NONS_Expression::lowereq,$1,$3,0);
	}|
	FCHK string {
		$$=new NONS_Expression::Expression(NONS_Expression::fchk,$2,0);
	}|
	//Compensates for the stupid, perfectly legal case of "lchk *134"
	LCHK '*' INTEGER {
		$$=new NONS_Expression::Expression(NONS_Expression::lchk,$3,0);
	}|
	LCHK string {
		$$=new NONS_Expression::Expression(NONS_Expression::lchk,$2,0);
	}|
	expr OR expr {
		$$=new NONS_Expression::Expression(NONS_Expression::or_operator,$1,$3,0);
	}|
	expr AND expr {
		$$=new NONS_Expression::Expression(NONS_Expression::and_operator,$1,$3,0);
	}|
	'+' expr %prec POS {
		$$=$2;
	}|
	'-' expr %prec NEG {
		$$=new NONS_Expression::Expression(NONS_Expression::neg,$2,0);
	}|
	'(' expr ')' {
		$$=$2;
	};
dereference_parameter:
	integer {
		$$=$1;
	}|
	'(' expr ')' {
		$$=$2;
	};
%%

#define DOUBLEOP(character,ret_value) if (c==(character)){\
	stream->get();\
	if (stream->peek()==(character)){\
		stream->get();\
		return (ret_value);\
	}\
	return (ret_value);\
}

template <typename T>
NONS_Expression::Expression *makeValue(const T &a){
	return new NONS_Expression::Expression(new NONS_Expression::Value(a));
}

int expressionParser_yylex(YYSTYPE *yylval,std::wstringstream *stream,NONS_VariableStore *store,PreParserData *ppd){
	if (ppd && ppd->trigger){
		ppd->trigger=0;
		if (ppd->mode==1)
			return IF;
		if (ppd->mode==2)
			return FOR;
	}
	int c;
	while (!stream->eof() && iswhitespace(wchar_t(c=stream->peek())) && c<0x80)
		stream->get();
	if (stream->eof())
		return 0;
	c=stream->peek();
	if (ppd && ppd->mode==1){
		if (multicomparison((wchar_t)c,L"\\@!#") || c>0x7F){
			if (c=='!'){
				stream->get();
				c=stream->peek();
				if (stream->eof())
					stream->clear();
				stream->putback('!');
				if (c=='='){
					c='!';
					goto expressionParser_yylex_000;
				}
			}
			yylval->position=stream->tellg();
			stream->get();
			return IF_THEN;
		}
		if (c=='`'){
			
		}
	}
expressionParser_yylex_000:
	if (NONS_isdigit(c)){
		std::wstring temp;
		while (NONS_isdigit(c=stream->peek()))
			temp.push_back(stream->get());
		//Handles the case "\*[ \t]*[_A-Za-z0-9]*". This is the kind of thing
		//that gives me omnicidal rages. Note: under no other circumstance does
		//it make sense that an integer be followed immediately by an alphabetic
		//character or an underscore.
		if (NONS_isid1char(c)){
			while (NONS_isidnchar(stream->peek()))
				temp.push_back(stream->get());
			yylval->obj=makeValue(temp);
			return STRING;
		}
		yylval->obj=makeValue(atoi(temp));
		return INTEGER;
	}
	if (c=='#'){
		stream->get();
		std::wstring temp;
		while (NONS_ishexa(stream->peek()))
			temp.push_back(stream->get());
		if (temp.size()<6)
			return ERROR;
		long a=0;
		for (size_t b=0;b<temp.size();b++)
			a=(a<<4)+HEX2DEC(temp[b]);
		yylval->obj=makeValue(a);
		return INTEGER;
	}
	if (c=='\"' || c=='`' || NONS_tolower(c)=='e'){
		yylval->position=stream->tellg();
		c=stream->get();
		bool cont=0,
			useEscapes=0;
		if (NONS_tolower(c)=='e'){
			if (stream->peek()!='\"'){
				stream->putback(c);
				cont=1;
			}else{
				c=stream->get();
				useEscapes=1;
			}
		}
		if (!cont){
			std::wstring temp;
			while ((wchar_t)stream->peek()!=c && !stream->eof()){
				wchar_t character=stream->get();
				if (character=='\\' && useEscapes){
					character=stream->get();
					switch (character){
						case '\\':
						case '\"':
							temp.push_back(character);
							break;
						case 'n':
						case 'r':
							temp.push_back('\n');
							break;
						case 'x':
							{
								std::wstring temp2;
								for (ulong a=0;NONS_ishexa(stream->peek()) && a<4;a++)
									temp2.push_back(stream->get());
								if (temp2.size()<4)
									return ERROR;
								wchar_t a=0;
								for (size_t b=0;b<temp2.size();b++)
									a=(a<<4)+HEX2DEC(temp2[b]);
								temp.push_back(a?a:32);
							}
							break;
						default:
							return ERROR;
					}
				}else
					temp.push_back(character);
			}
			if ((wchar_t)stream->peek()!=c){
				if (!ppd || ppd->mode!=1 || c!='`')
					handleErrors(NONS_UNMATCHED_QUOTES,0,"yylex",1);
				else
					return IF_THEN;
			}else
				stream->get();
			yylval->obj=makeValue(temp);
			return STRING;
		}
	}
	if (c=='*'){
		std::vector<wchar_t> backup;
		backup.push_back(stream->get());
		while (iswhitespace((wchar_t)stream->peek()))
			stream->get();
		std::wstring identifier;
		c=stream->peek();
		if (NONS_isidnchar(c)){
			while (NONS_isidnchar(c=stream->peek())){
				identifier.push_back(c);
				backup.push_back(stream->get());
			}
			if (gScriptInterpreter->script->blockFromLabel(identifier)){
				yylval->obj=makeValue(identifier);
				return STRING;
			}
		}
		if (stream->eof())
			stream->clear();
		while (backup.size()){
			stream->putback(backup.back());
			backup.pop_back();
		}
		c=stream->peek();
	}
	if (NONS_isid1char(c)){
		std::wstring temp;
		yylval->position=stream->tellg();
		temp.push_back(stream->get());
		while (NONS_isidnchar(stream->peek()))
			temp.push_back(stream->get());
		if (!stdStrCmpCI(temp,L"fchk"))
			return FCHK;
		if (!stdStrCmpCI(temp,L"lchk"))
			return LCHK;
		if (!stdStrCmpCI(temp,L"_eval"))
			return EVAL;
		if (!stdStrCmpCI(temp,L"_itoa"))
			return ITOA;
		if (!stdStrCmpCI(temp,L"_atoi"))
			return ATOI;
		if (!stdStrCmpCI(temp,L"then")){
			while (iswhitespace(wchar_t(c=stream->peek())) && c<0x80)
				stream->get();
			yylval->position=stream->tellg();
			return IF_THEN;
		}
		if (!stdStrCmpCI(temp,L"to"))
			return FOR_TO;
		if (!stdStrCmpCI(temp,L"step"))
			return FOR_STEP;
		
		NONS_VariableMember *member=store->getConstant(temp);
		if (!member)
			return IF_THEN;
		if (member->getType()==INTEGER){
			yylval->obj=makeValue(member->getInt());
			return INTEGER;
		}else{
			yylval->obj=makeValue(member->getWcs());
			return STRING;
		}
	}
	DOUBLEOP('=',EQUALS)
	DOUBLEOP('&',AND)
	DOUBLEOP('|',OR)
	if (c=='!'){
		stream->get();
		if (stream->peek()=='='){
			stream->get();
			return NEQ;
		}
		return c;
	}
	if (c=='<'){
		stream->get();
		if (stream->peek()=='='){
			stream->get();
			return LOWEREQ;
		}
		if (stream->peek()=='>'){
			stream->get();
			return NEQ;
		}
		return LOWER;
	}
	if (c=='>'){
		stream->get();
		if (stream->peek()=='='){
			stream->get();
			return GREATEREQ;
		}
		return GREATER;
	}
	if (!multicomparison((wchar_t)c,"+-*/[]%$?()")){
		wchar_t temp[]={c,0};
		handleErrors(NONS_UNRECOGNIZED_OPERATOR,0,"yylex",1,temp);
	}
	return stream->get();
}

void expressionParser_yyerror(std::wstringstream *,NONS_VariableStore *,NONS_Expression::Expression *&,PreParserData *,char const *s){
	handleErrors(NONS_UNDEFINED_ERROR,0,"yyparse",1,UniFromISO88591(s));
}
